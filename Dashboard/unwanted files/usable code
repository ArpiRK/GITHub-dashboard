   # else:
    #     flash("Invalid username or password", "error")
    #     return redirect(url_for('index'))

#@app.route('/combined_charts')
#def render_combined_charts():
    # Line Chart
#    data_line = pd.read_csv('repositorydata.csv')
#    a_line = data_line['repository name']
#    b_line = data_line['commit frequency']

#    plt.xlabel('Repository', fontsize=18)
#    plt.ylabel('Commit Frequency', fontsize=16)
#    plt.plot(a_line, b_line)

    # Save the line chart to a BytesIO object
#    img_bytes_line = io.BytesIO()
#    plt.savefig(img_bytes_line, format='png')
#    img_bytes_line.seek(0)
#    plt.close()

    # Convert the BytesIO object to base64 for embedding in HTML
#    img_base64_line = base64.b64encode(img_bytes_line.read()).decode('utf-8')

    # Bar Chart
#    data_bar = pd.read_csv('userdata.csv')
#    x_bar = data_bar['git username']
#    y_bar = data_bar['no of repositories']

#    plt.style.use('bmh')
#    plt.xlabel('Username', fontsize=18)
#    plt.ylabel('No of Repositories', fontsize=16)
#    plt.bar(x_bar, y_bar)

    # Save the bar chart to a BytesIO object
#    img_bytes_bar = io.BytesIO()
#    plt.savefig(img_bytes_bar, format='png')
#    img_bytes_bar.seek(0)
#    plt.close()

    # Convert the BytesIO object to base64 for embedding in HTML
#    img_base64_bar = base64.b64encode(img_bytes_bar.read()).decode('utf-8')

#    return render_template('combined_charts.html', img_base64_line=img_base64_line, img_base64_bar=img_base64_bar)

# Function to get line chart as base64
#def get_line_chart(repo_name):
    # Example: Assuming you have a DataFrame with commit data
    # Replace this with your actual data retrieval logic

    # Example DataFrame
#    data = {
#        'Year': [2020, 2021, 2022],
#        'Commits': [50, 75, 100]
#    }

#    df = pd.DataFrame(data)

    # Plotting the line chart
#    plt.plot(df['Year'], df['Commits'])
#    plt.xlabel('Year')
#    plt.ylabel('Number of Commits')
#    plt.title(f'Commits per Year for {repo_name}')

    # Saving the chart to BytesIO object
#    img_bytes = io.BytesIO()
#    plt.savefig(img_bytes, format='png')
#    img_bytes.seek(0)
#    plt.close()

    # Converting the BytesIO object to base64 for embedding in HTML
#    img_base64 = base64.b64encode(img_bytes.read()).decode('utf-8')

#    return img_base64

# Function to get bar chart as base64
#def get_bar_chart(repo_name):
    # Example: Assuming you have a DataFrame with contributor data
    # Replace this with your actual data retrieval logic

    # Example DataFrame
#    data = {
#        'Contributors': ['User1', 'User2', 'User3'],
#        'Commits': [25, 30, 45]
#    }

#    df = pd.DataFrame(data)

    # Plotting the bar chart
#    plt.bar(df['Contributors'], df['Commits'])
#    plt.xlabel('Contributors')
#    plt.ylabel('Number of Commits')
#    plt.title(f'Contributions for {repo_name}')

    # Saving the chart to BytesIO object
#    img_bytes = io.BytesIO()
#    plt.savefig(img_bytes, format='png')
#    img_bytes.seek(0)
#    plt.close()

    # Converting the BytesIO object to base64 for embedding in HTML
#    img_base64 = base64.b64encode(img_bytes.read()).decode('utf-8')

#    return img_base64

    # Check if the username and password are correct (you can modify this part based on your authentication logic)
    # if username == "ArpiRK" and password == "Accenture@@123":
    #     flash("You successfully logged in", "success")

    # Get user details from GitHub API

#def get_user_repositories(username):
#    # Make a request to the GitHub API to get user repositories
#    response = requests.get(GITHUB_API_BASE_URL + 'users/' + username + '/repos')
    
#    if response.status_code == 200:
        # Parse the JSON response
#        repositories_data = response.json()
#        return repositories_data
#    else:
#        return None


#def get_repo_details(username):
    # Make a request to the GitHub API to get following details
#    response = requests.get(GITHUB_API_BASE_URL + username + '/repos')
  
#    if response.status_code == 200:
#        repositories = response.json()
#        repository_names = [repository.get('name') for repository in repositories if repository.get('name')]
#        return render_template('repos.html', username=username, repositories=repository_names)
#    else:
#        return f"Error: Unable to fetch repositories. Status code: {response.status_code}"



